using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Intrinsics.X86;
using System.Text;
using System.Threading.Tasks;

namespace LeetCode.QuestionBank.Question2106
{
    public class Test2106
    {
        public void Test()
        {
            Interface2106 solution = new Solution2106_5();
            int[][] fruits; int startPos, k;
            int result, answer;
            int id = 0;

            // 1. 
            fruits = [[2, 8], [6, 3], [8, 6]]; startPos = 5; k = 4;
            answer = 9;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 2. 
            fruits = [[0, 9], [4, 1], [5, 7], [6, 2], [7, 4], [10, 9]]; startPos = 5; k = 4;
            answer = 14;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 3. 
            fruits = [[0, 3], [6, 4], [8, 5]]; startPos = 3; k = 2;
            answer = 0;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 4. 
            fruits = [[1060, 577], [1155, 4703], [1243, 590], [1366, 4535], [1483, 4010], [1612, 6288], [1617, 5807], [1654, 7620], [1738, 9269], [1753, 674], [1774, 8056], [1864, 1266], [1930, 8493], [1975, 136], [2031, 9733], [2040, 2290], [2060, 971], [2075, 2168], [2271, 8605], [2356, 3652], [2389, 372], [2395, 5399], [2441, 5821], [2443, 9224], [2494, 4962], [2507, 7073], [2684, 507], [2765, 6223], [2876, 3602], [2905, 1351], [3262, 3093], [3474, 1224], [3535, 8688], [3543, 8930], [3584, 9449], [3608, 9841], [3654, 3752], [3689, 4732], [3710, 3422], [3816, 4946], [3993, 3160], [4031, 8656], [4086, 2920], [4163, 3618], [4204, 8008], [4205, 3857], [4374, 5203], [4423, 9151], [4428, 6870], [4482, 4646], [4648, 5974], [4692, 3845], [4702, 40], [4855, 5000], [4873, 8112], [5072, 1096], [5243, 857], [5433, 4260], [5471, 1722], [5479, 7220], [5485, 8352], [5501, 17], [5509, 5546], [5530, 5146], [5554, 6626], [5680, 5466], [5722, 2083], [5739, 7025], [6161, 239], [6210, 9177], [6267, 8749], [6288, 2860], [6372, 4124], [6381, 4651], [6416, 4200], [6481, 7002], [6534, 7615], [6572, 7503], [6674, 1234], [6732, 1627], [6765, 8245], [6774, 7526], [6776, 4034], [6868, 3198], [6928, 7160], [6960, 1604], [7101, 7070], [7144, 8126], [7228, 6550], [7291, 867], [7389, 5365], [7468, 3143], [7482, 5700], [7729, 1000], [7803, 762], [7807, 9658], [7813, 477], [7825, 5914], [8135, 1619], [8201, 2661], [8231, 4020], [8295, 5096], [8614, 9731], [8616, 1461], [8619, 7263], [8675, 1334], [8695, 5425], [8840, 9366], [8904, 2341], [9005, 531], [9248, 2857], [9349, 6923], [9361, 6035], [9426, 1309], [9546, 2222], [9570, 7522], [9589, 3642], [9612, 7496], [9797, 7743], [9813, 6949], [9877, 1872], [9905, 6133]];
            startPos = 5500; k = 8785;
            answer = 466040;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 5. 
            fruits = [[200000, 10000]]; startPos = 0; k = 0;
            answer = 0;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 6. 
            fruits = [[1, 2], [3, 5], [6, 10], [7, 3], [8, 6], [9, 3], [10, 8], [12, 9], [16, 2], [18, 3], [20, 2], [26, 5], [27, 7], [29, 10], [30, 4], [31, 7], [33, 3], [34, 2], [35, 10], [39, 5]];
            startPos = 39; k = 10;
            answer = 41;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 7. 
            fruits = [[0, 96], [1, 72], [4, 80], [5, 30], [6, 40], [7, 35], [8, 9], [10, 47], [11, 47], [16, 90], [17, 14], [18, 49], [19, 71], [20, 35], [21, 98], [23, 22], [24, 84], [25, 78], [26, 29], [27, 36], [28, 84], [29, 68], [30, 60], [36, 3], [37, 14], [38, 38], [40, 80], [41, 78], [44, 12], [47, 30], [49, 8], [50, 82], [52, 78], [53, 1], [54, 9], [56, 4], [57, 92], [58, 78], [59, 75], [60, 43], [61, 100], [63, 3], [64, 64], [66, 44], [67, 61], [68, 88], [69, 14], [73, 89], [75, 21], [77, 93], [78, 91], [80, 18], [84, 7], [85, 56], [86, 100], [87, 69], [88, 89], [90, 31], [92, 66], [94, 80], [96, 94], [98, 91], [99, 33], [100, 14]];
            startPos = 0; k = 1;
            answer = 168;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 8. 
            fruits = [[1, 9], [5, 2], [8, 4], [12, 4], [13, 5], [14, 5], [15, 3], [16, 4], [19, 9], [25, 8], [27, 5], [29, 9], [31, 1], [35, 8], [37, 2]];
            startPos = 31; k = 2;
            answer = 10;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");

            // 9. 
            fruits = [[0, 10], [1, 10], [2, 82], [3, 65], [4, 29], [5, 81], [6, 81], [7, 80], [9, 50], [11, 52], [13, 75], [14, 64], [15, 40], [16, 51], [17, 94], [18, 84], [19, 5], [20, 59], [21, 80], [22, 100], [23, 29], [24, 21], [25, 62], [26, 99], [27, 73], [28, 9], [29, 57], [30, 58], [31, 59], [32, 19], [33, 2], [34, 94], [35, 69], [36, 59], [37, 82], [38, 51], [39, 86], [40, 6], [42, 86], [43, 10], [44, 12], [45, 84], [46, 55], [47, 42], [48, 11], [49, 76], [51, 40], [52, 61], [53, 60], [54, 27], [56, 61], [57, 45], [58, 20], [59, 21], [60, 87], [61, 4], [62, 1], [63, 95], [64, 26], [65, 77], [66, 50], [67, 83], [68, 72], [69, 87], [70, 28], [71, 93], [72, 64], [73, 42], [74, 26], [75, 6], [76, 69], [77, 51], [78, 29], [79, 80], [80, 55], [81, 15], [82, 50], [83, 68], [84, 48], [85, 13], [86, 4], [87, 63], [88, 99], [89, 42], [90, 18], [91, 67], [92, 15], [93, 32], [94, 37], [95, 4], [96, 77], [97, 74], [98, 41], [99, 16]];
            startPos = 89; k = 0;
            answer = 42;
            result = solution.MaxTotalFruits(fruits, startPos, k);
            Console.WriteLine($"{++id,2}: {(result == answer) + ",",-6} result: {result}, answer: {answer}");
        }
    }
}
